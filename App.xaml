<Application x:Class="NoorRAC.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:NoorRAC"
             xmlns:converters="clr-namespace:NoorRAC.Converters"
             
             xmlns:svg="http://sharpvectors.codeplex.com/svgc/">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- You might have other merged dictionaries here -->
            </ResourceDictionary.MergedDictionaries>

            <!-- Declare your converter here -->
            <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
            <converters:ErrorsToStringConverter x:Key="ErrorsConverter" />

            <!-- You likely also need a BooleanToVisibilityConverter -->
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

            <!-- Add other global resources like styles here -->



            <Style TargetType="{x:Type Window}">
                <Setter Property="TextElement.FontFamily" Value="Resources/Fonts/Urbanist.ttf #Urbanist" />
            </Style>
            <Style TargetType="{x:Type Page}">
                <Setter Property="TextElement.FontFamily" Value="Resources/Fonts/Urbanist.ttf #Urbanist" />
            </Style>
            <Style TargetType="{x:Type UserControl}">
                <Setter Property="TextElement.FontFamily" Value="Resources/Fonts/Urbanist.ttf #Urbanist" />
            </Style>

            <Style TargetType="{x:Type Control}">
                <Setter Property="TextElement.FontFamily" Value="Resources/Fonts/Urbanist.ttf #Urbanist" />
                <!-- You might also want to set FontSize globally here -->
                <!-- <Setter Property="TextElement.FontSize" Value="14" /> -->
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="FontFamily" Value="Resources/Fonts/Urbanist.ttf #Urbanist" />
                <!-- <Setter Property="FontSize" Value="14" /> -->
            </Style>

            <Style x:Key="RoundedCalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
                <!-- Increase Font Size -->
                <Setter Property="FontSize" Value="12"/>
                <!-- Add Padding -->
                <Setter Property="Padding" Value="3"/>
                <!-- Minimum size to accommodate padding and text -->
                <Setter Property="MinWidth" Value="35"/>
                <Setter Property="MinHeight" Value="30"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <!-- Provide a basic template so padding and font size are applied -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                            <!-- Use a Border to potentially add background/border effects later if needed -->
                            <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}" CornerRadius="20" >
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              ContentSource="Content"/>
                            </Border>
                            <!-- Add Triggers for VisualStates (Hover, Selected, etc.) here if needed -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!-- Example: Simple hover effect -->
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="BorderBrush" Value="Green"/>
                                    <Setter Property="BorderThickness" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <!-- Example: Simple selected effect -->
                                    <Setter Property="Background" Value="#C1D8C3"/>
                                    <Setter Property="Foreground" Value="Black" />
                                    <Setter Property="FontWeight" Value="SemiBold" />
                                </Trigger>
                                <Trigger Property="IsInactive" Value="True">
                                    <Setter Property="Foreground" Value="LightGray"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RoundedCalendarButtonStyle" TargetType="{x:Type CalendarButton}">
                <!-- Increase Font Size and Padding -->
                <Setter Property="FontSize" Value="12"/>
                <Setter Property="Padding" Value="8"/>
                <Setter Property="MinWidth" Value="60"/>
                <!-- Adjusted min size -->
                <Setter Property="MinHeight" Value="60"/>
                <!-- Adjusted min size -->
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CalendarButton}">
                            <Border x:Name="BackgroundBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            CornerRadius="6">
                                <!-- Slightly Rounded -->
                                <ContentPresenter x:Name="ContentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          ContentSource="Content"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="#C1D8C3"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="BackgroundBorder" Property="Background" Value="#C1D8C3"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="RoundedPreviousButtonTemplate" TargetType="{x:Type Button}">
                <Grid Cursor="Hand" Background="Transparent">
                    <Path x:Name="path"
                  Data="M10,0 L0,8 L10,16 Z"
                    Fill="Blue"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Stretch="Uniform"
                  Width="8" Height="12" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="path" Property="Fill" Value="Red" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="path" Property="Opacity" Value="0.4" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="RoundedNextButtonTemplate" TargetType="{x:Type Button}">
                <Grid Cursor="Hand" Background="Transparent">
                    <Path x:Name="path"
                  Data="M0,0 L10,8 L0,16 Z"
                    Fill="Yellow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Stretch="Uniform"
                  Width="8" Height="12" />
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="path" Property="Fill" Value="Gray" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="path" Property="Opacity" Value="0.4" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="RoundedHeaderButtonTemplate" TargetType="{x:Type Button}">
                <Grid Cursor="Hand" Background="Transparent">
                    <ContentPresenter x:Name="buttonContent"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Content="{TemplateBinding Content}"
                              TextElement.Foreground="Black"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="1,4,1,4"
                              />
                    <!-- Adjust Margin if needed -->
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="buttonContent" Property="TextElement.Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="buttonContent" Property="Opacity" Value="0.5" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>




            <Style x:Key="RoundedCalendarStyle" TargetType="{x:Type Calendar}">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="CalendarDayButtonStyle" Value="{StaticResource RoundedCalendarDayButtonStyle}"/>
                <Setter Property="CalendarButtonStyle" Value="{StaticResource RoundedCalendarButtonStyle}" />

                <!-- Add more setters here to style the Calendar's appearance if needed -->
                <!-- Example: Style CalendarDayButton, CalendarButton etc. -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Calendar}">
                            <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                <CalendarItem x:Name="PART_CalendarItem"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}" />
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RoundedDatePicker" TargetType="{x:Type DatePicker}">
                <!-- Basic Properties to match ComboBox -->
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="#ABCAAE"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="16,8"/>
                <!-- Match ComboBox Padding -->
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <!-- Remove focus rectangle -->
                <Setter Property="CalendarStyle" Value="{StaticResource RoundedCalendarStyle}"/>
                <!-- Optional: Style the calendar too -->

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DatePicker}">
                            <Grid x:Name="templateRoot">
                                <!-- Outer Border - Matches ComboBox -->
                                <Border x:Name="mainBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="6"
                        SnapsToDevicePixels="True"
                    Padding="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <!-- TextBox for displaying the date -->
                                        <!-- Note: Padding is handled by the outer Border now -->
                                        <DatePickerTextBox x:Name="PART_TextBox"
                                       Grid.Column="0"
                                       Style="{x:Null}"
                                       Background="Transparent"
                                       BorderThickness="0"
                                       Padding="0"
                                Foreground="{TemplateBinding Foreground}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalContentAlignment="Left"
                                       CaretBrush="{TemplateBinding Foreground}"
                                       Focusable="{Binding Focusable, RelativeSource={RelativeSource TemplatedParent}}"
                                       SelectionBrush="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                        <!-- Set Focusable based on DatePicker's property -->
                                        <!-- Removed CaretBrush="Transparent" to allow typing if Focusable=True -->

                                        <!-- Custom Placeholder Text -->
                                        <TextBlock x:Name="placeholderText"
                               Grid.Column="0"
                               Text="{TemplateBinding Tag}"
                               Foreground="Gray"
                               Padding="2,0,0,0"
                               Margin="0"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               HorizontalAlignment="Left"
                               IsHitTestVisible="False"
                               Visibility="Collapsed"/>
                                        <!-- Visibility controlled by trigger -->

                                        <!-- Button required by DatePicker template, styled to be invisible -->
                                        <!-- Contains the dropdown arrow Image -->
                                        <Button x:Name="PART_Button"
                            Grid.Column="1"
                            Style="{x:Null}"
                            Focusable="False"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Width="Auto" Height="Auto"
                            Margin="12,0,0,0">
                                            <!-- Match ComboBox Image Margin -->
                                            <Button.Template>
                                                <ControlTemplate TargetType="Button">
                                                    <!-- Transparent background so only image shows -->
                                                    <Grid Background="Transparent">
                                                        <!-- Use the same Image as the ComboBox -->
                                                        <Image Source="{svg:SvgImage Source=Resources/Svgs/IcSharpKeyboardArrowDown.svg}"
                                            Width="12" Height="12"
                                            Stretch="Uniform"
                                            VerticalAlignment="Center"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>
                                    </Grid>
                                </Border>

                                <!-- Calendar Popup -->
                                <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=templateRoot}"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   StaysOpen="False"
                   Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                    <!-- Border matches ComboBox Popup Border -->
                                    <Border Background="White"
                        BorderBrush="Black"
                        BorderThickness="1"
                        CornerRadius="12"
                            Padding="4">
                                        <Calendar x:Name="PART_Calendar"
                              Style="{TemplateBinding CalendarStyle}"
                              BorderThickness="0"
                              SelectedDate="{Binding SelectedDate, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              DisplayDate="{Binding DisplayDate, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              DisplayDateStart="{Binding DisplayDateStart, RelativeSource={RelativeSource TemplatedParent}}"
                              DisplayDateEnd="{Binding DisplayDateEnd, RelativeSource={RelativeSource TemplatedParent}}"
                              FirstDayOfWeek="{Binding FirstDayOfWeek, RelativeSource={RelativeSource TemplatedParent}}"
                              IsTodayHighlighted="{Binding IsTodayHighlighted, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Border>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- Show Placeholder when no date is selected AND DatePickerTextBox is empty -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="SelectedDate" Value="{x:Null}" />
                                        <!-- Check if the internal TextBox is effectively empty -->
                                        <Condition SourceName="PART_TextBox" Property="Text" Value="" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="placeholderText" Property="Visibility" Value="Visible"/>
                                    <!-- Optional: If you still see PART_TextBox's default watermark, uncomment below -->
                                    <!-- <Setter TargetName="PART_TextBox" Property="Foreground" Value="Transparent"/> -->
                                </MultiTrigger>

                                <!-- Alternative Placeholder Trigger (Simpler if PART_TextBox watermark isn't an issue) -->
                                <!--
             <Trigger Property="SelectedDate" Value="{x:Null}">
                <Setter TargetName="placeholderText" Property="Visibility" Value="Visible"/>
             </Trigger>
             -->

                                <!-- Hover Effect - Match ComboBox -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="mainBorder" Property="BorderBrush" Value="#6E7687"/>
                                </Trigger>

                                <!-- Focused State (Optional - subtle glow) -->
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter TargetName="mainBorder" Property="BorderBrush" Value="#6E7687"/>
                                    <!-- You could add a subtle Effect like GlowBitmapEffect here if desired -->
                                </Trigger>

                                <!-- Disabled State -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.56"/>
                                    <!-- Standard disabled opacity -->
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SidebarActiveButton" TargetType="Button">
                <Setter Property="Background" Value="#C1D8C3"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Padding" Value="20,10"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="6"
                                Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#ABCAAE"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="SidebarButton" TargetType="Button">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Padding" Value="20,10"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#ABCAAE"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="PasswordBox">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="PasswordBox">
                            <Border Background="White" BorderBrush="#ABCAAE" BorderThickness="1"
                            CornerRadius="10" Padding="5">
                                <ScrollViewer x:Name="PART_ContentHost"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="SignInButton" TargetType="Button">
                <Setter Property="Background" Value="#C1D8C3"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="FontFamily" Value="roboto"/>
                <Setter Property="FontWeight" Value="Medium"/>
                <Setter Property="Padding" Value="20,10"/>
                <Setter Property="Margin" Value="5"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="8"
                                Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#ABCAAE"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="RoundedButton" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="6"
                                Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RadioOptionButton" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="White"
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="6"
                                Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="#C5D3E8"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="RadioOptionActiveButton" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="#C5D3E8"
                        BorderBrush="Transparent"
                        BorderThickness="0"
                        CornerRadius="6"
                        Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="HoverLightenButton" TargetType="Button" BasedOn="{StaticResource RoundedButton}">
                <Setter Property="Background" Value="#EAF4F4"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="Padding" Value="4"/>
                <Setter Property="Margin" Value="0,12,10,0"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#DDEEEE"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderBrush" Value="Transparent"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <ControlTemplate x:Key="DefaultErrorTemplate">
                <StackPanel Orientation="Vertical">
                    <!-- The AdornedElementPlaceholder is where the original control (TextBox) will be rendered -->
                    <AdornedElementPlaceholder x:Name="adornerPlaceholder"/>
                    <!-- This ItemsControl will display all errors for the current property -->
                    <ItemsControl ItemsSource="{Binding}" Margin="2,2,0,0">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ErrorContent}" Foreground="Red" FontSize="10"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ControlTemplate>

            <Style x:Key="RoundedTextBox" TargetType="TextBox">
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="#ABCAAE"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="6"
                                Padding="{TemplateBinding Padding}">
                                <ScrollViewer x:Name="PART_ContentHost"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource DefaultErrorTemplate}"/>

                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="BorderBrush" Value="Red"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <!-- ToolTip to show errors on hover -->
                        <Setter Property="ToolTip"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="Black"/>
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="BorderBrush" Value="Black"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="RoundedComboBox" TargetType="ComboBox">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderBrush" Value="#ABCAAE"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="16,8"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ComboBox">
                            <Grid>
                                <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="6">
                                    <Grid>
                                        <ToggleButton HorizontalContentAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" Focusable="True" Padding="12,8" IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Grid.Column="0" Text="{TemplateBinding SelectionBoxItem}" VerticalAlignment="Center"/>
                                                <Image Grid.Column="1" Source="{svg:SvgImage Source=Resources/Svgs/IcSharpKeyboardArrowDown.svg}" Width="12" Height="12" Margin="12,0,0,0"/>
                                            </Grid>
                                        </ToggleButton>
                                    </Grid>
                                </Border>
                                <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                                    <Grid>
                                        <Border Background="White" BorderBrush="Black" BorderThickness="1" CornerRadius="6"/>
                                        <ScrollViewer Margin="4,6,4,6">
                                            <ItemsPresenter />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="#6E7687"/>
                        <Setter Property="Background" Value="Transparent" />
                    </Trigger>
                </Style.Triggers>
            </Style>


            <Style x:Key="CustomDataGrid" TargetType="DataGrid">
                <Setter Property="AutoGenerateColumns" Value="False"/>
                <Setter Property="CanUserAddRows" Value="False"/>
                <Setter Property="CanUserDeleteRows" Value="False"/>
                <Setter Property="CanUserResizeRows" Value="False"/>
                <Setter Property="HeadersVisibility" Value="Column"/>
                <Setter Property="ColumnHeaderStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridColumnHeader">
                            <Setter Property="Background" Value="White"/>
                            <Setter Property="Padding" Value="12"/>
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="BorderThickness" Value="0,0,0,1" />
                            <Setter Property="BorderBrush" Value="Black" />
                        </Style>
                    </Setter.Value>
                </Setter>
                <!-- Make the border and grid lines a little less imposing -->
                <Setter Property="BorderBrush" Value="#FFFFFF" />
                <Setter Property="HorizontalGridLinesBrush" Value="#FFFFFF" />
                <Setter Property="VerticalGridLinesBrush" Value="#FFFFFF" />

                <Setter Property="RowStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <!-- Highlight a grid row as the mouse passes over -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#C1D8C3" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell">
                            <Style.Triggers>
                                <!-- Highlight selected rows -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="#C1D8C3" />
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="Background" Value="#C1D8C3" />
                                    <Setter Property="BorderBrush" Value="Black" />
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                            </Style.Triggers>
                            <!-- Add some padding around the contents of a cell -->
                            <Setter Property="Padding" Value="8,16,8,16" />
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="DataGridCell">
                                        <Border Padding="{TemplateBinding Padding}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}">
                                            <ContentPresenter />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style TargetType="Control">
                                        <Setter Property="BorderBrush" Value="Transparent" />
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
